---
title: "Census Data Retrieval for San Luis Obispo County, CA"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Introduction

This vignette demonstrates how to retrieve decennial Census data for San Luis Obispo County, California using the `tidycensus` package in R.

Website for [Census data](https://www.census.gov/quickfacts/fact/table/)

## Step 1: Get API Key

First, you need to obtain an API key from the U.S. Census Bureau. You can sign up for a free API key at [Census Bureau API Key Signup](https://api.census.gov/data/key_signup.html).

```{r}
# Replace with your actual API key
api_key <- "b27a9847a9dde0fb751cb95e6bc8ad37ca6e1293"
```

## Step 2: Install and Load Necessary Packages

Next, install and load the necessary packages. If the packages are already installed, this step will just load them.

```{r}
# Load the packages
library(tidycensus)
library(ggplot2)
library(terra)
library(r2r)
library(tidyverse)
```

## Step 3: Set Census API Key

Set the Census API key. This step is necessary to authenticate your requests to the Census API.

```{r}
# Set Census API key
census_api_key(api_key, install=TRUE, overwrite=TRUE)
readRenviron("~/.Renviron")
```

## Step 4: Define Parameters

Define the parameters for the data retrieval. In this case, we're interested in data for San Luis Obispo County, California from the 2020 decennial Census.



```{r}
# Define city and state for  Los Angeles, CA
city <- "44000"  # FIPS code for Los Angeles
state <- "06"    # FIPS code for California
year <- 2020     # Year of the acs census
```


```{r}
# Define city and state for New York, NY
city_2 <- "51000"  # FIPS code for New York City 
state_2 <- "36"    # FIPS code for New York
year_2 <- 2020     # Year of the acs census
```

```{r}
# Define city and state for  Chicago, Illinios
city_3 <- "14000"  # FIPS code for Chicago
state_3 <- "17"    # FIPS code for Illinios
year_3 <- 2020     # Year of the acs census
```

```{r}
# Define city and state for  Houston, Texas
city_4 <- "51000"  # FIPS code for Houston
state_4 <- "48"    # FIPS code for Texas
year_4 <- 2020     # Year of the acs census
```

```{r}
# Define city and state for  Phoenix, Arizona
city_5 <- "51000"  # FIPS code for Phoenix
state_5 <- "4"    # FIPS code for Arizona
year_5 <- 2020     # Year of the acs census
```

```{r}
# Define city and state for  Philadelphia, Pennsylvania
city_6 <- "51000"  # FIPS code for Philadelphia
state_6 <- "42"    # FIPS code for Pennsylvania
year_6 <- 2020     # Year of the acs census
```

```{r}
# Define city and state for  San Antonio, Texas
city_7 <- "51000"  # FIPS code for  San Antonio
state_7 <- "48"    # FIPS code for Texas
year_7 <- 2020     # Year of the acs census
```

```{r}
# Define city and state for  San Diego, California 
city_8 <- "51000"  # FIPS code for San Diego
state_8 <- "06"    # FIPS code for California
year_8 <- 2020     # Year of the acs census
```

```{r}
# Define city and state for  Dallas, Texas
city_9 <- "51000"  # FIPS code for Dallas
state_9 <- "48"    # FIPS code for Texas
year_9 <- 2020     # Year of the acs census
```

```{r}
# Define city and state for  Austin, Texas
city_10 <- "51000"  # FIPS code for Austin
state_10 <- "48"    # FIPS code for Texas
year_10 <- 2020     # Year of the acs census
```


# I am going to give you the FIPS code for multiple locations in the US. You can use this to get the data for the location you are interested in.
```{r}
# Define the vectors
cities <- c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17",
            "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33",
            "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50")
counties <- c(061, 037, 031, 201, 013, 101, 029, 073, 113, 085,
              015, 031, 439, 049, 097, 119, 075, 033, 031, 109,
              037, 141, 043, 025, 003, 051, 163, 111, 157, 005,
              079, 001, 019, 019, 067, 013, 209, 121, 055, 041,
              183, 810, 037, 086, 001, 053, 143, 029, 173, 439)
states <- c(36, 06, 17, 48, 04, 42, 48, 06, 48, 06, 48, 12, 48, 39, 18, 37, 06, 53, 08, 40, 47, 48, 24, 25, 32, 41, 26, 21,
            47, 24, 55, 35, 06, 04, 06, 04, 29, 13, 31, 08, 37, 51, 06, 12, 06, 27, 40, 06, 20, 48)
countyNames <- c("new_york", "los_angeles", "chicago", "houston", "phoenix", "philadelphia", "san_antonio", "san_diego", "dallas", 
                 "san_jose", "austin", "jacksonville", "fort_worth", "columbus", "indianapolis", "charlotte", "san_francisco",
                 "seattle", "denver", "oklahoma_city", "nashville", "el_paso", "washington", "boston", "las_vegas", "portland", 
                 "detroit", "louisville", "memphis", "baltimore", "milwaukee", "albuquerque", "fresno", "tucson", "sacramento",
                 "mesa", "kansas_city", "atlanta", "omaha", "colorado_springs", "raleigh", "virginia_beach", "long_beach", "miami",
                 "oakland", "minneapolis", "tulsa", "bakersfield", "wichita", "arlington")
stateNames <- c("NY", "CA", "IL", "TX", "AZ", "PA", "TX", "CA", "TX", "CA", "TX", "FL", "TX", "OH", "IN", "NC", "CA", "WA", "CO",
                "OK", "TN", "TX", "MD", "MA", "NV", "OR", "MI", "KY", "TN", "MD", "WI", "NM", "CA", "AZ", "CA", "AZ", "MO", "GA", 
                "NE", "CO", "NC", "VA", "CA", "FL", "CA", "MN", "OK", "CA", "KS", "TX")

# Create the data frame
df <- data.frame(City = cities, CountyCode = counties, StateCode = states, CountyName = countyNames, StateName = stateNames)

# Print the data frame
print(df)

```


## Step 5: Define Variables

Define the variables you're interested in. These correspond to specific racial and ethnic categories.

```{r}
race_vars1 <- c(
  White = "B02001_002E",
  Black = "B02001_003E",
  Asian = "B02001_005E",
  AI_AN = "B02001_004E", ## American Indian and Alaska Native
  NH_PI = "B02001_006E", ## Native Hawaiian and Other Pacific Islander
  some_Other = "B02001_007E", ## Other
  Two_or_more = "B02001_008E" ## Two or more
)
```

```{r}
income_var <- c(
  less_10000 = "B19001_002E",
  between_100000_14999 = "B19001_003E" ,
  between_15000_19999 = "B19001_004E",
  between_20000_24999 = "B19001_005E",
  between_25000_29999 = "B19001_006E",
  between_30000_34999 = "B19001_007E",
  between_35000_44999 = "B19001_008E",
  between_40000_44999 = "B19001_009E",
  between_45000_49999 = "B19001_010E",
  between_50000_59999 = "B19001_011E",
  between_60000_74999 = "B19001_012E",
  between_75000_99999 = "B19001_013E",
  between_100000_124999 = "B19001_014E",
  between_125000_149999 = "B19001_015E",
  between_150000_199999 = "B19001_016E",
  more_200000 = "B19001_017E"
)

```

```{r}
sex_var <- c(
  total_male ="B01001_002E",
  total_female = "B01001_026E"
)
```

```{r}
age_var <- c(
  male_under_5 = "B01001_003E",
  male_5to9 = "B01001_004E",
  male_10to14 = "B01001_005E",
  male_15to17 = "B01001_006E",
  male_18to19 = "B01001_007E",
  male_20 = "B01001_008E",
  male_21 = "B01001_009E",
  male_22to24 = "B01001_010E",
  male_25to29 = "B01001_011E",
  male_30to34 = "B01001_012E",
  male_35to39 = "B01001_013E",
  male_40to44 = "B01001_014E",
  male_45to49 = "B01001_015E",
  male_50to54 = "B01001_016E",
  male_55to59 = "B01001_017E",
  male_60to61 = "B01001_018E",
  male_62to64 = "B01001_019E",
  male_65to66 = "B01001_020E",
  male_67to69 = "B01001_021E",
  male_70to74 = "B01001_022E",
  male_75to79 = "B01001_023E",
  male_80to84 = "B01001_024E",
  male_over_85 = "B01001_025E",
  female_under_5 = "B01001_027E",
female_5to9 = "B01001_028E",
female_10to14 = "B01001_029E",
female_15to17 = "B01001_030E",
female_18to19 = "B01001_031E",
female_20 = "B01001_032E",
female_21 = "B01001_033E",
female_22to24 = "B01001_034E",
female_25to29 = "B01001_035E",
female_30to34 = "B01001_036E",
female_35to39 = "B01001_037E",
female_40to44 = "B01001_038E",
female_45to49 = "B01001_039E",
female_50to54 = "B01001_040E",
female_55to59 = "B01001_041E",
female_60to61 = "B01001_042E",
female_62to64 = "B01001_043E",
female_65to66 = "B01001_044E",
female_67to69 = "B01001_045E",
female_70to74 = "B01001_046E",
female_75to79 = "B01001_047E",
female_80to84 = "B01001_048E",
female_over_85 = "B01001_049E"
)
```

```{r}
# Define variables
household_var <- c(
  two_person = "B11016_003E",
  three_person = "B11016_004E",
  four_person = "B11016_005E",
  five_person = "B11016_006E",
  six_person = "B11016_007E",
  seven_or_more_person = "B11016_008E",
  one_person = "B11016_010E",
  non_family_two_person = "B11016_011E",
  non_family_three_person = "B11016_012E",
  non_family_four_person = "B11016_013E",
  non_family_five_person = "B11016_014E",
  non_family_six_person = "B11016_015E",
  non_family_seven_or_more_person = "B11016_016E"
)


```


## Step 6: Retrieve Data


```{r}
acs_ca_city_data <- get_acs(geography = "place",
                   variables = race_vars1,
                   state = state,
                   place = city,
                   year = year)

acs_ca2_city_data <- get_acs(
                    geography = "place",
                    variables = income_var,
                    state = state_8,
                    place = city_8,
                    year = year)

acs_ca3_city_data <- get_acs(
                    geography = "place",
                    variables = age_var,
                    state = state,
                    place = city,
                    year = year)

acs_ca4_city_data <- get_acs(
                    geography = "place",
                    variables = household_var,
                    state = state,
                    place = city,
                    year = year)

acs_ca5_city_data <- get_acs(
                    geography = "place",
                    variables = sex_var,
                    state = state,
                    place = city,
                    year = year)



```
```{r}


acs_ca_city_data_final <- lapply(list(acs_ca_city_data, acs_ca2_city_data, acs_ca3_city_data, acs_ca4_city_data, acs_ca5_city_data), function(df) {
  df %>% filter(GEOID == "0644000")
})

age_dataframe <- acs_ca_city_data_final[[3]]
household_dataframe <- acs_ca_city_data_final[[4]]

age_first_subset <- age_dataframe[1:23, ]
age_second_subset <- age_dataframe[(24):nrow(age_dataframe), ]

age_first_subset$estimate <- age_first_subset$estimate + age_second_subset$estimate

household_first_subset <- household_dataframe[1:7, ]
household_second_subset <- household_dataframe[(8):nrow(household_dataframe), ]

household_first_subset$estimate <- household_first_subset$estimate + household_second_subset$estimate

acs_ca_city_data_final[[3]] <- age_first_subset
acs_ca_city_data_final[[4]] <- household_first_subset

final_la_df <- Reduce(function(x, y) left_join(x, y, by = "GEOID"), acs_ca_city_data_final)




```

```{r}
acs_sd_city_data_final <- lapply(list(acs_ca_city_data, acs_ca2_city_data, acs_ca3_city_data, acs_ca4_city_data, acs_ca5_city_data), function(df) {
  df %>% filter(GEOID == "0666000")
})

age_dataframe <- acs_sd_city_data_final[[3]]
household_dataframe <- acs_sd_city_data_final[[4]]

age_first_subset <- age_dataframe[1:23, ]
age_second_subset <- age_dataframe[(24):nrow(age_dataframe), ]

age_first_subset$estimate <- age_first_subset$estimate + age_second_subset$estimate

household_first_subset <- household_dataframe[1:7, ]
household_second_subset <- household_dataframe[(8):nrow(household_dataframe), ]

household_first_subset$estimate <- household_first_subset$estimate + household_second_subset$estimate

acs_sd_city_data_final[[3]] <- age_first_subset
acs_sd_city_data_final[[4]] <- household_first_subset

final_sd_df <- Reduce(function(x, y) left_join(x, y, by = "GEOID"), acs_sd_city_data_final)


```


```{r}
acs_ny_city_data <- get_acs(geography = "place",
                    variables = race_vars1,
                    state = state_2,
                    place = city_2,
                    year = year_2)

acs_ny2_city_data <- get_acs(geography = "place",
                    variables = income_var,
                    state = state_2,
                    place = city_2,
                    year = year_2)
acs_ny3_city_data <- get_acs(geography = "place",
                    variables = age_var,
                    state = state_2,
                    place = city_2,
                    year = year_2)
acs_ny4_city_data <- get_acs(geography = "place",
                    variables = household_var,
                    state = state_2,
                    place = city_2,
                    year = year_2)
acs_ny5_city_data <- get_acs(geography = "place",
                    variables = sex_var,
                    state = state_2,
                    place = city_2,
                    year = year_2)

```

```{r}
acs_ny_city_data_final <- lapply(list(acs_ny_city_data, acs_ny2_city_data, acs_ny3_city_data, acs_ny4_city_data, acs_ny5_city_data), function(df) {
  df %>% filter(GEOID == "3651000")
})

age_dataframe <- acs_ny_city_data_final[[3]]
household_dataframe <- acs_ny_city_data_final[[4]]

age_first_subset <- age_dataframe[1:23, ]
age_second_subset <- age_dataframe[(24):nrow(age_dataframe), ]

age_first_subset$estimate <- age_first_subset$estimate + age_second_subset$estimate

household_first_subset <- household_dataframe[1:7, ]
household_second_subset <- household_dataframe[(8):nrow(household_dataframe), ]

household_first_subset$estimate <- household_first_subset$estimate + household_second_subset$estimate

acs_ny_city_data_final[[3]] <- age_first_subset
acs_ny_city_data_final[[4]] <- household_first_subset

final_ny_df <- Reduce(function(x, y) left_join(x, y, by = "GEOID"), acs_ny_city_data_final)
```


```{r}
acs_chicago_city_data <- get_acs(geography = "place",
                    variables = race_vars1,
                    state = state_3,
                    place = city_3,
                    year = year_3)

acs_chicago2_city_data <- get_acs(geography = "place",
                    variables = income_var,
                    state = state_3,
                    place = city_3,
                    year = year_3)
acs_chicago3_city_data <- get_acs(geography = "place",
                    variables = age_var,
                    state = state_3,
                    place = city_3,
                    year = year_3)
acs_chicago4_city_data <- get_acs(geography = "place",
                    variables = household_var,
                    state = state_3,
                    place = city_3,
                    year = year_3)
acs_chicago5_city_data <- get_acs(geography = "place",
                    variables = sex_var,
                    state = state_3,
                    place = city_3,
                    year = year_3)


```

```{r}
acs_chicago_city_data_final <- lapply(list(acs_chicago_city_data, acs_chicago2_city_data, acs_chicago3_city_data, acs_chicago4_city_data, acs_chicago5_city_data), function(df) {
  df %>% filter(GEOID == "1714000")
})

age_dataframe <- acs_chicago_city_data_final[[3]]
household_dataframe <- acs_chicago_city_data_final[[4]]

age_first_subset <- age_dataframe[1:23, ]
age_second_subset <- age_dataframe[(24):nrow(age_dataframe), ]

age_first_subset$estimate <- age_first_subset$estimate + age_second_subset$estimate

household_first_subset <- household_dataframe[1:7, ]
household_second_subset <- household_dataframe[(8):nrow(household_dataframe), ]

household_first_subset$estimate <- household_first_subset$estimate + household_second_subset$estimate

acs_chicago_city_data_final[[3]] <- age_first_subset
acs_chicago_city_data_final[[4]] <- household_first_subset

final_chicago_df <- Reduce(function(x, y) left_join(x, y, by = "GEOID"), acs_chicago_city_data_final)
```



```{r}
acs_texas_city_data <- get_acs(geography = "place",
                    variables = race_vars1,
                    state = state_4,
                    place = city_4,
                    year = year_4)

acs_texas2_city_data <- get_acs(geography = "place",
                    variables = income_var,
                    state = state_4,
                    place = city_4,
                    year = year_4)
acs_texas3_city_data <- get_acs(geography = "place",
                    variables = age_var,
                    state = state_4,
                    place = city_4,
                    year = year_4)
acs_texas4_city_data <- get_acs(geography = "place",
                    variables = household_var,
                    state = state_4,
                    place = city_4,
                    year = year_4)
acs_texas5_city_data <- get_acs(geography = "place",
                    variables = sex_var,
                    state = state_4,
                    place = city_4,
                    year = year_4)



```
```{r}
acs_sa_city_data_final <- lapply(list(acs_texas_city_data, acs_texas2_city_data, acs_texas3_city_data, acs_texas4_city_data, acs_texas4_city_data), function(df) {
  df %>% filter(GEOID == "4865000")
})

age_dataframe <- acs_sa_city_data_final[[3]]
household_dataframe <- acs_sa_city_data_final[[4]]

age_first_subset <- age_dataframe[1:23, ]
age_second_subset <- age_dataframe[(24):nrow(age_dataframe), ]

age_first_subset$estimate <- age_first_subset$estimate + age_second_subset$estimate

household_first_subset <- household_dataframe[1:7, ]
household_second_subset <- household_dataframe[(8):nrow(household_dataframe), ]

household_first_subset$estimate <- household_first_subset$estimate + household_second_subset$estimate

acs_sa_city_data_final[[3]] <- age_first_subset
acs_sa_city_data_final[[4]] <- household_first_subset

final_sa_df <- Reduce(function(x, y) left_join(x, y, by = "GEOID"), acs_sa_city_data_final)
```


```{r}
acs_dallas_city_data_final <- lapply(list(acs_texas_city_data, acs_texas2_city_data, acs_texas3_city_data, acs_texas4_city_data, acs_texas4_city_data), function(df) {
  df %>% filter(GEOID == "4819000")
})

age_dataframe <- acs_dallas_city_data_final[[3]]
household_dataframe <- acs_dallas_city_data_final[[4]]

age_first_subset <- age_dataframe[1:23, ]
age_second_subset <- age_dataframe[(24):nrow(age_dataframe), ]

age_first_subset$estimate <- age_first_subset$estimate + age_second_subset$estimate

household_first_subset <- household_dataframe[1:7, ]
household_second_subset <- household_dataframe[(8):nrow(household_dataframe), ]

household_first_subset$estimate <- household_first_subset$estimate + household_second_subset$estimate

acs_dallas_city_data_final[[3]] <- age_first_subset
acs_dallas_city_data_final[[4]] <- household_first_subset

final_dallas_df <- Reduce(function(x, y) left_join(x, y, by = "GEOID"), acs_dallas_city_data_final)
```



```{r}
acs_austin_city_data_final <- lapply(list(acs_texas_city_data, acs_texas2_city_data, acs_texas3_city_data, acs_texas4_city_data, acs_texas4_city_data), function(df) {
  df %>% filter(GEOID == "4805000")
})

age_dataframe <- acs_austin_city_data_final[[3]]
household_dataframe <- acs_austin_city_data_final[[4]]

age_first_subset <- age_dataframe[1:23, ]
age_second_subset <- age_dataframe[(24):nrow(age_dataframe), ]

age_first_subset$estimate <- age_first_subset$estimate + age_second_subset$estimate

household_first_subset <- household_dataframe[1:7, ]
household_second_subset <- household_dataframe[(8):nrow(household_dataframe), ]

household_first_subset$estimate <- household_first_subset$estimate + household_second_subset$estimate

acs_austin_city_data_final[[3]] <- age_first_subset
acs_austin_city_data_final[[4]] <- household_first_subset

final_austin_df <- Reduce(function(x, y) left_join(x, y, by = "GEOID"), acs_austin_city_data_final)

```


```{r}
acs_houston_city_data_final <- lapply(list(acs_texas_city_data, acs_texas2_city_data, acs_texas3_city_data, acs_texas4_city_data, acs_texas4_city_data), function(df) {
  df %>% filter(GEOID == "4835000")
})

age_dataframe <- acs_houston_city_data_final[[3]]
household_dataframe <- acs_houston_city_data_final[[4]]

age_first_subset <- age_dataframe[1:23, ]
age_second_subset <- age_dataframe[(24):nrow(age_dataframe), ]

age_first_subset$estimate <- age_first_subset$estimate + age_second_subset$estimate

household_first_subset <- household_dataframe[1:7, ]
household_second_subset <- household_dataframe[(8):nrow(household_dataframe), ]

household_first_subset$estimate <- household_first_subset$estimate + household_second_subset$estimate

acs_houston_city_data_final[[3]] <- age_first_subset
acs_houston_city_data_final[[4]] <- household_first_subset

final_houstan_df <- Reduce(function(x, y) left_join(x, y, by = "GEOID"), acs_houston_city_data_final)


```


```{r}
acs_phoenix_city_data <- get_acs(geography = "place",
                    variables = race_vars1,
                    state = state_5,
                    place = city_5,
                    year = year_5)

acs_phoenix2_city_data <- get_acs(geography = "place",
                    variables = income_var,
                    state = state_5,
                    place = city_5,
                    year = year_5)

acs_phoenix3_city_data <- get_acs(geography = "place",
                    variables = age_var,
                    state = state_5,
                    place = city_5,
                    year = year_5)

acs_phoenix4_city_data <- get_acs(geography = "place",
                    variables = household_var,
                    state = state_5,
                    place = city_5,
                    year = year_5)


acs_phoenix5_city_data <- get_acs(geography = "place",
                    variables = sex_var,
                    state = state_5,
                    place = city_5,
                    year = year_5)

```
```{r}
acs_pheonix_city_data_final <- lapply(list(acs_pheonix_city_data, acs_phoenix2_city_data, acs_phoenix3_city_data, acs_phoenix4_city_data, acs_phoenix5_city_data), function(df) {
  df %>% filter(GEOID == "0455000")
})

age_dataframe <- acs_pheonix_city_data_final[[3]]
household_dataframe <- acs_pheonix_city_data_final[[4]]

age_first_subset <- age_dataframe[1:23, ]
age_second_subset <- age_dataframe[(24):nrow(age_dataframe), ]

age_first_subset$estimate <- age_first_subset$estimate + age_second_subset$estimate

household_first_subset <- household_dataframe[1:7, ]
household_second_subset <- household_dataframe[(8):nrow(household_dataframe), ]

household_first_subset$estimate <- household_first_subset$estimate + household_second_subset$estimate

acs_pheonix_city_data_final[[3]] <- age_first_subset
acs_pheonix_city_data_final[[4]] <- household_first_subset

final_pheonix_df <- Reduce(function(x, y) left_join(x, y, by = "GEOID"), acs_pheonix_city_data_final)
```


```{r}
acs_philly_city_data <- get_acs(geography = "place",
                    variables = race_vars1,
                    state = state_6,
                    place = city_6,
                    year = year_6)

acs_philly2_city_data <- get_acs(geography = "place",
                    variables = income_var,
                    state = state_6,
                    place = city_6,
                    year = year_6)

acs_philly3_city_data <- get_acs(geography = "place",
                    variables = age_var,
                    state = state_6,
                    place = city_6,
                    year = year_6)
acs_philly4_city_data <- get_acs(geography = "place",
                    variables = household_var,
                    state = state_6,
                    place = city_6,
                    year = year_6)
acs_philly5_city_data <- get_acs(geography = "place",
                    variables = sex_var,
                    state = state_6,
                    place = city_6,
                    year = year_6)


```
```{r}
acs_philly_city_data_final <- lapply(list(acs_philly_city_data, acs_philly2_city_data, acs_philly3_city_data, acs_philly4_city_data, acs_philly5_city_data), function(df) {
  df %>% filter(GEOID == "4260000")
})

age_dataframe <- acs_philly_city_data_final[[3]]
household_dataframe <- acs_philly_city_data_final[[4]]

age_first_subset <- age_dataframe[1:23, ]
age_second_subset <- age_dataframe[(24):nrow(age_dataframe), ]

age_first_subset$estimate <- age_first_subset$estimate + age_second_subset$estimate

household_first_subset <- household_dataframe[1:7, ]
household_second_subset <- household_dataframe[(8):nrow(household_dataframe), ]

household_first_subset$estimate <- household_first_subset$estimate + household_second_subset$estimate

acs_philly_city_data_final[[3]] <- age_first_subset
acs_philly_city_data_final[[4]] <- household_first_subset

final_philly_df <- Reduce(function(x, y) left_join(x, y, by = "GEOID"), acs_philly_city_data_final)
```


```{r}
clean_dataframes <- function(...) {
  dfs <- list(...)  
  
  cleaned_dfs <- lapply(dfs, function(df) {
    df <- df %>%
      select(-matches("^Name\\.|moe"))
    df <- df %>%
      rename(
        race = variable.x,
        income = variable.y,
        age = variable.x.x,
        household_size = variable.y.y,
        sex = variable
      )
    
    return(df)
  })
  
  return(cleaned_dfs)
}

cleaned_data <- clean_dataframes(final_philly_df, final_pheonix_df, final_austin_df, final_dallas_df, final_sa_df, final_houstan_df, final_chicago_df, final_la_df, final_ny_df, final_sd_df)

```


```{r}
replace_values <- function(df) {
  df <- df %>%
    mutate(
      race = case_when(
        race == "B02001_002" ~ "White",
        race == "B02001_003" ~ "Black",
        race == "B02001_005" ~ "Asian",
        race == "B02001_004" ~ "AI_AN",
        race == "B02001_006" ~ "NH_PI",
        race == "B02001_007" ~ "some_Other",
        race == "B02001_008" ~ "Two_or_more",
      ),
      income = case_when(
        income == "B19001_002" ~ "less_10000",
        income == "B19001_003" ~ "between_100000_14999",
        income == "B19001_004" ~ "between_15000_19999",
        income == "B19001_005" ~ "between_20000_24999",
        income == "B19001_006" ~ "between_25000_29999",
        income == "B19001_007" ~ "between_30000_34999",
        income == "B19001_008" ~ "between_35000_44999",
        income == "B19001_009" ~ "between_40000_44999",
        income == "B19001_010" ~ "between_45000_49999",
        income == "B19001_011" ~ "between_50000_59999",
        income == "B19001_012" ~ "between_60000_74999",
        income == "B19001_013" ~ "between_75000_99999",
        income == "B19001_014" ~ "between_100000_124999",
        income == "B19001_015" ~ "between_125000_149999",
        income == "B19001_016" ~ "between_150000_199999",
        income == "B19001_017" ~ "more_200000",
      ),
      sex = case_when(
        sex == "B01001_002" ~ "total_male",
        sex == "B01001_026" ~ "total_female",
      ),
      age = case_when(
        age == "B01001_003" ~ "under_5",
        age == "B01001_004" ~ "from_5to9",
        age == "B01001_005" ~ "from_10to14",
        age == "B01001_006" ~ "from_15to17",
        age == "B01001_007" ~ "from_18to19",
        age == "B01001_008" ~ "at_20",
        age == "B01001_009" ~ "at_21",
        age == "B01001_010" ~ "from_22to24",
        age == "B01001_011" ~ "from_25to29",
        age == "B01001_012" ~ "from_30to34",
        age == "B01001_013" ~ "from_35to39",
        age == "B01001_014" ~ "from_40to44",
        age == "B01001_015" ~ "from_45to49",
        age == "B01001_016" ~ "from_50to54",
        age == "B01001_017" ~ "from_55to59",
        age == "B01001_018" ~ "from_60to61",
        age == "B01001_019" ~ "from_62to64",
        age == "B01001_020" ~ "from_65to66",
        age == "B01001_021" ~ "from_67to69",
        age == "B01001_022" ~ "from_70to74",
        age == "B01001_023" ~ "from_75to79",
        age == "B01001_024" ~ "from_80to84",
        age == "B01001_025" ~ "over_85",
      ),
      household_size = case_when(
        household_size == "B11016_003" ~ "two_person",
        household_size == "B11016_004" ~ "three_person",
        household_size == "B11016_005" ~ "four_person",
        household_size == "B11016_006" ~ "five_person",
        household_size == "B11016_007" ~ "six_person",
        household_size == "B11016_008" ~ "seven_or_more_person",
        household_size == "B11016_010" ~ "one_person",
      )
    )
  return(df)
}

```


```{r}
# Define the list of columns


philly_df1 <- replace_values(cleaned_data[[1]])
pheonix_df2 <- replace_values(cleaned_data[[2]])
austin_df3 <- replace_values(cleaned_data[[3]])
dallas_df4 <- replace_values(cleaned_data[[4]])
sa_df5 <- replace_values(cleaned_data[[5]])
houstan_df6 <- replace_values(cleaned_data[[6]])
Chicago_df7 <- replace_values(cleaned_data[[7]])
la_df8 <- replace_values(cleaned_data[[8]])
ny_df9 <- replace_values(cleaned_data[[9]])
sa_df10 <- replace_values(cleaned_data[[10]])

```



## Conclusion

You now have a data frame `slo_ca_df` that contains the decennial Census data for San Luis Obispo County, California. You can use this data for further analysis or visualization.
